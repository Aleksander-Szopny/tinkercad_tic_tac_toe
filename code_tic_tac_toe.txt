#include <Adafruit_NeoPixel.h>  //led ring input
#include <Keypad.h>       		//keyboard input
#define purple 2          		//purple cable row1	 
#define blue 3			  		//blue cable row2
#define teal 4			  		//teal cable row3
#define NUMPIXELS 21 			//number of neopixels in strip

//led ring definition
Adafruit_NeoPixel row1 = Adafruit_NeoPixel(NUMPIXELS, purple, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel row2 = Adafruit_NeoPixel(NUMPIXELS, blue, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel row3 = Adafruit_NeoPixel(NUMPIXELS, teal, NEO_GRB + NEO_KHZ800);

//board AI move
int move[2];

const byte ROWS = 3; //3 row
const byte COLS = 3; //3 column

//keyboard 4x4 definition 
char keys[ROWS][COLS] = 
{
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'}
};

//input keyboard pin
byte rowPins[ROWS] = {12, 11, 10};
byte colPins[COLS] = {9, 8, 7};

//readKey
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

bool moveDone = false;

//game board
char board[3][3]=
{
  {'?','?','?'},
  {'?','?','?'},
  {'?','?','?'}
};

//check if button pressed
bool checkIfCorrect(char key)
{ 
  int k = (int)key-48; //ascii -48
  if(k == (-48))
   return false;
    
  int r = floor((k-1)/3); 
  int c = (k-1)%3;
  bool f = false;
  
  if(board[r][c] == '?')
  { 
    f=true;
    board[r][c]='X';             
  }
  return f;
}

//reset board
void reset()
{
  for(int i=0;i<3;i++)
  {
    for(int j=0;j<3;j++)
        board[i][j]='?';
    }
}

//Check if move possible
bool CheckMoves(char tab[3][3])
{
  for(int i = 0; i<3; i++)
     for(int j = 0; j<3; j++)
        if(tab[i][j]=='?')
           return true;
     return false;
}

//check if win
int checkWin(char tab[3][3])
{
  //win for column (X OR O)
  for(int i=0;i<3;i++)
  {
    if(tab[0][i]==tab[1][i]&&tab[1][i]==tab[2][i])
    {
      if(tab[0][i]=='X')
          return -1;
      else if(tab[0][i]=='O')
          return +1;
    }
  }
  
  //win for row (X OR O)
  for(int i=0;i<3;i++)
  {
    if(tab[i][0]==tab[i][1]&&tab[i][1]==tab[i][2])
    {
      if(tab[i][0]=='X')
        return -1;
      else if(tab[i][0]=='O')
        return +1;
    }
  }
  //win for diagonal (X OR O)
  
    if(tab[0][0]==tab[1][1]&&tab[1][1]==tab[2][2])
    {
      if(tab[0][0]=='X')
        return -1;
      else if(tab[0][0]=='O')
        return +1;
    }
  
   if(tab[0][2]==tab[1][1]&&tab[1][1]==tab[2][0])
    {
     if(tab[0][2]=='X')
       return -1;
     else if(tab[0][2]=='O')
       return +1;
    }
  //if not win return 0, if x win return -1, if O win return +1
  return 0;
}

//min max algorithm to choose best move
int minmax(char tab[3][3], int depth, bool isMax)
{
  int score = checkWin(tab);
  
//return 1 if O win
  if(score ==1)
    return score;
  
//return -1 if X win
  if(score ==-1)
    return score;
  
//if no move
  if(CheckMoves(board)==false)
    return 0;
  
//if move is possible
  if(isMax)
  {
     int best = -10;
    
    //loop through all cells
    for (int i = 0; i<3; i++)
        {
            for (int j = 0; j<3; j++)
            {
                // if cell is empty
                if (board[i][j]=='?')
                {
                    //move
                    board[i][j] = 'O';
 
                    //recursion choose the highest value
                    best = max( best, minmax(tab, depth+1, !isMax) );
 
                    //Undo the move
                    board[i][j] = '?';
                }
            }
        }
        return best;
  }
  //if player moved
    else
    {
        int best = 10;
 
        //loop through all cells
        for (int i = 0; i<3; i++)
        {
            for (int j = 0; j<3; j++)
            {
                // if cell is empty
                if (board[i][j]=='?')
                {
                   //opponent move
                    board[i][j] = 'X';
 
                    //recursion choose the lowest value
                    best = min(best,
                           minmax(tab, depth+1, !isMax));
 
                    //Undo the move
                    board[i][j] = '?';
                }
            }
        }
        return best;
    }
}

void findBestMove(char tab[3][3])
{
    int bestVal = -10;
  
    //loop througth all cell
    for (int i = 0; i<3; i++)
    {
        for (int j = 0; j<3; j++)
        {
            // if cell is empty
            if (tab[i][j]=='?')
            {
                //move
                tab[i][j] = 'O';
 
                // compute evaluation function for move          
                int moveVal = minmax(tab, 0, false);
 
                // Undo the move
                tab[i][j] = '?';
                 
                // if current value is more than best then update
                if (moveVal > bestVal)
                {
                    move[0] = i;
                    move[1] = j;
                    bestVal = moveVal;
                }
            }
        }
    }
}

//board display
void lightUp(char tab[3][3])
{
	//set X (red color) row 1
  for(int i=0;i<3;i++){
  	if(tab[0][i]=='X')
    {
      for(int x=(i*7); x < 7+(i*7) ; x++) 
      {
     	row1.setPixelColor(x, row1.Color(255, 0, 0));
      }
      for(int x=(i*7); x < 7+(i*7) ; x+=7) 
      {
       	row1.setPixelColor(1+x, row1.Color(0, 0, 0));
   		row1.setPixelColor(4+x, row1.Color(0, 0, 0));
     }
     }
	 //Set O (blue color) row 1
    else if(tab[0][i]=='O')
    {
    	for(int x=(i*7)+1; x < 7+(i*7) ; x++) 
			row1.setPixelColor(x, row1.Color(0, 0, 255));		
    }
   
  }
  
  //set X (red color) row 2
  for(int i=0;i<3;i++){
  	if(tab[1][i]=='X')
    {
      for(int x=(i*7); x < 7+(i*7) ; x++) 
      {
     	row2.setPixelColor(x, row2.Color(255, 0, 0));
      }
      for(int x=(i*7); x < 7+(i*7) ; x+=7) 
      {
       	row2.setPixelColor(1+x, row2.Color(0, 0, 0));
   		row2.setPixelColor(4+x, row2.Color(0, 0, 0));
     }
     }
	 //set O (blue color) row 2
     else if(tab[1][i]=='O')
    {
    	for(int x=(i*7)+1; x < 7+(i*7) ; x++) 
			row2.setPixelColor(x, row2.Color(0, 0, 255));		
    }
  }
  
  //set X (red color) row 3
  for(int i=0;i<3;i++){
  	if(tab[2][i]=='X')
    {
      for(int x=(i*7); x < 7+(i*7) ; x++) 
      {
     	row3.setPixelColor(x, row3.Color(255, 0, 0));
      }
        for(int x=(i*7); x < 7+(i*7) ; x+=7) 
      {
       	row3.setPixelColor(1+x, row3.Color(0, 0, 0));
   		row3.setPixelColor(4+x, row3.Color(0, 0, 0));
     } 
     }
	 //set O (blue color) row 3
     else if(tab[2][i]=='O')
    {
    	for(int x=(i*7)+1; x < 7+(i*7) ; x++) 
			row3.setPixelColor(x, row3.Color(0, 0, 255));		
    }    
  }
  
  //led light up
 row1.show();
 row2.show();
 row3.show();    
}

//Check win
void win(char tab[3][3])
{
	//If O win set blue O for all cells
  if(checkWin(tab)==+1)
  {
    for(int j=0; j<3;j++)
    {
    	for(int i=0;i<3;i++)
        {
      		for(int x=(i*7); x < 7+(i*7) ; x++) 
            {
				row1.setPixelColor(x, row1.Color(0, 0, 255));
      			row2.setPixelColor(x, row2.Color(0, 0, 255));
      			row3.setPixelColor(x, row3.Color(0, 0, 255));       
            }
           for(int i=0;i<21;i+=7)
           {
           	row1.setPixelColor(i, row1.Color(0, 0, 0)); 
           	row2.setPixelColor(i, row2.Color(0, 0, 0));
           	row3.setPixelColor(i, row3.Color(0, 0, 0));
           }
          
          row1.show();
 		  row2.show();
 		  row3.show();
      	}
      		delay(500);
    		for(int x=0; x < 21 ; x++) 
            {
				row1.setPixelColor(x, row1.Color(0, 0, 0));
      			row2.setPixelColor(x, row2.Color(0, 0, 0));
      			row3.setPixelColor(x, row3.Color(0, 0, 0)); 	 
      		}
      		row1.show();
 			row2.show();
 			row3.show();
    } 
    reset();
  }
  
  //If X win set blue X for all cells
  else if(checkWin(board)==-1)
  {
      for(int j=0; j<3;j++)
    {
    	for(int i=0;i<3;i++)
        {
      		for(int x=(i*7); x < 7+(i*7) ; x++) 
            {
				row1.setPixelColor(x, row1.Color(255, 0, 0));
      			row2.setPixelColor(x, row2.Color(255, 0, 0));
      			row3.setPixelColor(x, row3.Color(255, 0, 0));       
            }
           for(int i=0; i<21; i+=7)
          {
           	row1.setPixelColor(1+i, row1.Color(0, 0, 0));
   			row1.setPixelColor(4+i, row1.Color(0, 0, 0));
          	row2.setPixelColor(1+i, row2.Color(0, 0, 0));
   			row2.setPixelColor(4+i, row2.Color(0, 0, 0));
          	row3.setPixelColor(1+i, row3.Color(0, 0, 0));
   			row3.setPixelColor(4+i, row3.Color(0, 0, 0));  
          }
         
          
          row1.show();
 		  row2.show();
 		  row3.show();
      	}
      		delay(500);
    		for(int x=0; x < 21 ; x++) 
            {
				row1.setPixelColor(x, row1.Color(0, 0, 0));
      			row2.setPixelColor(x, row2.Color(0, 0, 0));
      			row3.setPixelColor(x, row3.Color(0, 0, 0)); 	 
      		}
      		row1.show();
 			row2.show();
 			row3.show();
    }
    reset();
   }
   
   //If draw set purple for all cells
   else if(checkWin(board)==0 && CheckMoves(board)==false)
   {
    for(int j=0; j<3;j++)
    {
    	for(int i=0;i<3;i++)
        {
      		for(int x=(i*7); x < 7+(i*7) ; x++) 
            {
				row1.setPixelColor(x, row1.Color(255, 0, 255));
      			row2.setPixelColor(x, row2.Color(255, 0, 255));
      			row3.setPixelColor(x, row3.Color(255, 0, 255));       
            }
                       
          row1.show();
 		  row2.show();
 		  row3.show();
      	}
      		delay(500);
    		for(int x=0; x < 21 ; x++) 
            {
				row1.setPixelColor(x, row1.Color(0, 0, 0));
      			row2.setPixelColor(x, row2.Color(0, 0, 0));
      			row3.setPixelColor(x, row3.Color(0, 0, 0)); 	 
      		}
      		row1.show();
 			row2.show();
 			row3.show();
    }
  	reset();
   }
}

void setup() {
  row1.begin();
  Serial.begin(9600);
}

void loop() 
{
//check end game
 win(board);
   
 char key =0;
 while(key==0)
 {
   key=keypad.getKey();
 }  
 
 if(checkIfCorrect(key)){    
 switch( key ){
 case '1':
   moveDone = true;
    break;
   
 case '2':
    moveDone = true;
    break;
   
 case '3':
    moveDone = true;
    break;
    
 case '4':
    moveDone = true;
    break;
   
 case '5':
    moveDone = true;
    break;
   
 case '6':
    moveDone = true;
    break;    
    
 case '7':
    moveDone = true;
    break;
   
 case '8':
    moveDone = true;
    break;
    
 case '9':
    moveDone = true;
    break;    
}
}
   
//Computer moves
  if(moveDone==true)
  {
   //light up board
   lightUp(board);
    
	//computer moves
    findBestMove(board);
    board[move[0]][move[1]]='O';
   
   //light up board
    lightUp(board);
    moveDone==false;
  }
}

